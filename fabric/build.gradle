plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    modImplementation("at.petra-k.hexcasting:hexcasting-fabric-1.20.1:0.11.1-7-pre-637")
    modLocalRuntime("at.petra-k.paucal:paucal-fabric-1.20.1:0.6.0-pre-118")
    modLocalRuntime("vazkii.patchouli:Patchouli:1.20.1-84-FABRIC")
    modLocalRuntime("dev.onyxstudios.cardinal-components-api:cardinal-components-api:5.2.1")
    modLocalRuntime("io.github.tropheusj:serialization-hooks:0.4.99999")
    modLocalRuntime("dev.emi:trinkets:3.7.0")
    modLocalRuntime("net.fabricmc:fabric-language-kotlin:1.10.18+kotlin.1.9.22")
    modLocalRuntime("me.shedaniel.cloth:cloth-config-fabric:11.1.106")
    localRuntime("com.github.LlamaLad7:MixinExtras:0.1.1")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
